Directory Final Structure:
JavaTest/
- instructions.txt
- GenTests/
-- RegressionTest.java
-- RegressionTest0.java
-- RegressionTest1.java
-- RegressionTest2.java
-- RegressionTest3.java
-- RegressionTest.class
-- RegressionTest0.class
-- RegressionTest1.class
-- RegressionTest2.class
-- RegressionTest3.class
-- junit-4.13.2.jar
-- hamcrest-core-1.3.jar
-- jacocoagent.jar
-- jacocoant.jar
-- jacococli.jar
-- jacoco.exec
-- other/
--- jacocoagent.jar
--- jacocoant.jar
--- jacococli.jar
--- jacoco.exec
--- RegressionTest.java
--- RegressionTest0.java
--- RegressionTest1.java
--- RegressionTest2.java
--- RegressionTest3.java
--- RegressionTest.class
--- RegressionTest0.class
--- RegressionTest1.class
--- RegressionTest2.class
--- RegressionTest3.class
--- mathTest.class
--- mathTest.java
- junit-4.13.2.jar
- hamcrest-core-1.3.jar
- mathTest.java
- mathTest.class


(1) Frist Step: compile mathTest.java into mathTest.class file. Current Folder: JavaTest
javac mathTest.java

(2) Second Step: use this command to generate the Tests. Make a folder called GenTests and move the test files there.
java -classpath .;randoop-all-4.3.3.jar randoop.main.Main gentests --testclass=mathTest --time-limit=30

(3) Third Step: Compile the Test classes using:
javac -cp .;junit-4.13.2.jar RegressionTest.java

(4) Fourth Step: use jacocoagent to generate the code coverage report. Use the command below. You will get an jacoco.exec. This is in the GenTests folder.
java -javaagent:jacocoagent.jar=destfile=jacoco.exec -cp .;junit-4.13.2.jar;hamcrest-core-1.3.jar;randoop-all-4.3.3.jar org.junit.runner.JUnitCore RegressionTest

(5) Fifth Step: Make new folder called Other. Look at the directory structure for what you need there. Use the command to Generate the coverage using the CLI from JaCoCo. Use the other command to generate the XML file. [Run in the Other/ Folder]
java -jar jacococli.jar report jacoco.exec --classfiles . --sourcefiles . --html report/

java -jar jacococli.jar report jacoco.exec --classfiles . --sourcefiles . --xml report.xml

(6) Run in Order: [This is in the Other/ Folder]
py parseXML.py --> filtered_report.xml
py extractFromReg.py --> extracted_methods.txt
py calculateXMLReportScore.py --> similarity_scores.txt
py calculateTXTReportScore.py --> similarity_scores_methods.txt
py compareReport.py --> coverageReport.txt, low_possibility_redundant.txt, medium_possibility_redundant.txt and high_possibility_redundant.txt

(7) Done. Manual test looking up for evaluations. The files generated by the compareReport.py is used in evaluation.
